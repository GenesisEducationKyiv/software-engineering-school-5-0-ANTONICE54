// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/usecases/subscription_service.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"
	models "weather-forecast/internal/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionRepository) Create(ctx context.Context, subscription models.Subscription) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, subscription)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionRepositoryMockRecorder) Create(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionRepository)(nil).Create), ctx, subscription)
}

// DeleteByToken mocks base method.
func (m *MockSubscriptionRepository) DeleteByToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByToken indicates an expected call of DeleteByToken.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByToken", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteByToken), ctx, token)
}

// GetByEmail mocks base method.
func (m *MockSubscriptionRepository) GetByEmail(ctx context.Context, email string) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockSubscriptionRepositoryMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetByEmail), ctx, email)
}

// GetByToken mocks base method.
func (m *MockSubscriptionRepository) GetByToken(ctx context.Context, token string) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", ctx, token)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken.
func (mr *MockSubscriptionRepositoryMockRecorder) GetByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetByToken), ctx, token)
}

// Update mocks base method.
func (m *MockSubscriptionRepository) Update(ctx context.Context, subscription models.Subscription) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, subscription)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSubscriptionRepositoryMockRecorder) Update(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubscriptionRepository)(nil).Update), ctx, subscription)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokenManager) Generate(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenManagerMockRecorder) Generate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenManager)(nil).Generate), ctx)
}

// Validate mocks base method.
func (m *MockTokenManager) Validate(ctx context.Context, token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenManagerMockRecorder) Validate(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenManager)(nil).Validate), ctx, token)
}

// MockNotificationSender is a mock of NotificationSender interface.
type MockNotificationSender struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSenderMockRecorder
}

// MockNotificationSenderMockRecorder is the mock recorder for MockNotificationSender.
type MockNotificationSenderMockRecorder struct {
	mock *MockNotificationSender
}

// NewMockNotificationSender creates a new mock instance.
func NewMockNotificationSender(ctrl *gomock.Controller) *MockNotificationSender {
	mock := &MockNotificationSender{ctrl: ctrl}
	mock.recorder = &MockNotificationSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationSender) EXPECT() *MockNotificationSenderMockRecorder {
	return m.recorder
}

// SendConfirmation mocks base method.
func (m *MockNotificationSender) SendConfirmation(ctx context.Context, email, token string, frequency models.Frequency) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendConfirmation", ctx, email, token, frequency)
}

// SendConfirmation indicates an expected call of SendConfirmation.
func (mr *MockNotificationSenderMockRecorder) SendConfirmation(ctx, email, token, frequency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmation", reflect.TypeOf((*MockNotificationSender)(nil).SendConfirmation), ctx, email, token, frequency)
}

// SendConfirmed mocks base method.
func (m *MockNotificationSender) SendConfirmed(ctx context.Context, email, token string, frequency models.Frequency) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendConfirmed", ctx, email, token, frequency)
}

// SendConfirmed indicates an expected call of SendConfirmed.
func (mr *MockNotificationSenderMockRecorder) SendConfirmed(ctx, email, token, frequency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmed", reflect.TypeOf((*MockNotificationSender)(nil).SendConfirmed), ctx, email, token, frequency)
}
