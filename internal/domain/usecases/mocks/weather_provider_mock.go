// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/usecases/weather_provider.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"
	models "weather-forecast/internal/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockWeatherProvider is a mock of WeatherProvider interface.
type MockWeatherProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherProviderMockRecorder
}

// MockWeatherProviderMockRecorder is the mock recorder for MockWeatherProvider.
type MockWeatherProviderMockRecorder struct {
	mock *MockWeatherProvider
}

// NewMockWeatherProvider creates a new mock instance.
func NewMockWeatherProvider(ctrl *gomock.Controller) *MockWeatherProvider {
	mock := &MockWeatherProvider{ctrl: ctrl}
	mock.recorder = &MockWeatherProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherProvider) EXPECT() *MockWeatherProviderMockRecorder {
	return m.recorder
}

// GetWeatherByCity mocks base method.
func (m *MockWeatherProvider) GetWeatherByCity(ctx context.Context, city string) (*models.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherByCity", ctx, city)
	ret0, _ := ret[0].(*models.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherByCity indicates an expected call of GetWeatherByCity.
func (mr *MockWeatherProviderMockRecorder) GetWeatherByCity(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherByCity", reflect.TypeOf((*MockWeatherProvider)(nil).GetWeatherByCity), ctx, city)
}
